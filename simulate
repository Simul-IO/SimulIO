#!/usr/bin/python3

import json
import argparse

from simulio.graph import UnidirectionalRing, BidirectionalRing, CompleteGraph, ArbitraryGraph
from simulio.simulator import SyncSimulator, SyncSimulatorWithRandomUID, AsyncSimulator, AsyncSimulatorWithRandomUID, \
    OrderedAsyncSimulator, OrderedAsyncSimulatorWithRandomUID
from simulio.transition import parse

UNIDIRECTIONAL_RING = 'UnidirectionalRing'
BIDIRECTIONAL_RING = 'BidirectionalRing'
COMPLETE_GRAPH = 'CompleteGraph'
ARBITRARY_GRAPH = 'Arbitrary'

SYNC = "sync"
ASYNC = "async"
ORDERED_ASYNC = "ordered-async"


def run_cli():
    parser = argparse.ArgumentParser(description='Simulate I/O automata on given Graph.')
    parser.add_argument('-a', '--automata', required=True,
                        help='Automata algorithm file')
    parser.add_argument('-g', '--graph', required=True,
                        choices=[UNIDIRECTIONAL_RING, BIDIRECTIONAL_RING, COMPLETE_GRAPH, ARBITRARY_GRAPH],
                        help='Simulate the automaton operating on GRAPH')
    parser.add_argument('-n', '--network-size',
                        help="For Uni/BidirectionalRing and CompleteGraph must specify network size")
    parser.add_argument('-gf', '--graph-file',
                        help='For Arbitrary graph, give a graph file definition')
    parser.add_argument('-t', '--type',
                        choices=[SYNC, ASYNC, ORDERED_ASYNC],
                        help='type of simulator(sync, async, ordered-async)')
    parser.add_argument('-r', '--random-ids', action='store_true',
                        help="Generate random uids for graph nodes")
    parser.add_argument('-o', '--output', type=argparse.FileType('w'), default='-',
                        help='Output file to write result to it.')
    parser.add_argument('-s', '--sleep', type=float, default=0.0,
                        help='Sleep for this number of seconds between steps')  # TODO
    args = parser.parse_args()

    with open(str(args.automata)) as f:
        automata = parse(f.readlines())

    if args.graph == UNIDIRECTIONAL_RING:
        graph = UnidirectionalRing(int(args.network_size))
    elif args.graph == BIDIRECTIONAL_RING:
        graph = BidirectionalRing(int(args.network_size))
    elif args.graph == COMPLETE_GRAPH:
        graph = CompleteGraph(int(args.network_size))
    else:  # ARBITRARY_GRAPH
        graph = ArbitraryGraph(str(args.graph_file))

    if args.type == SYNC:
        if args.random_ids:
            simulator = SyncSimulatorWithRandomUID(graph, automata)
        else:
            simulator = SyncSimulator(graph, automata)
    elif args.type == ASYNC:
        if args.random_ids:
            simulator = AsyncSimulatorWithRandomUID(graph, automata)
        else:
            simulator = AsyncSimulator(graph, automata)
    elif args.type == ORDERED_ASYNC:
        if args.random_ids:
            simulator = OrderedAsyncSimulatorWithRandomUID(graph, automata)
        else:
            simulator = OrderedAsyncSimulator(graph, automata)

    simulator.run()

    json.dump({
        'graph': simulator.graph.to_dict(),
        'steps': simulator.details,
    }, args.output)


if __name__ == '__main__':
    run_cli()
